{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","cn","TodoList","todos","map","getUserById","userId","usersFromServer","find","newTodo","App","useState","setTitle","userSelect","setUserSelect","isTitleValid","setIsTitleValid","isUserSelectValid","setIsUserSelectValid","setTodos","action","method","onSubmit","event","preventDefault","trim","currentTodos","reduce","maxId","Math","max","htmlFor","type","placeholder","value","onChange","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.433eec69.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    user,\n    title,\n    completed,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport './App.scss';\nimport { Todo } from './components/types/Todo';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (userId: number) => {\n  return usersFromServer.find((user) => user.id === userId) || null;\n};\n\nconst newTodo: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [userSelect, setUserSelect] = useState(0);\n  const [isTitleValid, setIsTitleValid] = useState(true);\n  const [isUserSelectValid, setIsUserSelectValid] = useState(true);\n  const [todos, setTodos] = useState<Todo[]>(newTodo);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(/[^0-9A-Za-zА-Яа-яҐґЇїЄє\\s]/g, ''));\n    setIsTitleValid(true);\n  };\n\n  const handleUserSelectChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setUserSelect(+event.target.value);\n    setIsUserSelectValid(true);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (title.trim() === '') {\n      setIsTitleValid(false);\n    }\n\n    if (userSelect === 0) {\n      setIsUserSelectValid(false);\n    }\n\n    if (title.trim() !== '' && userSelect !== 0) {\n      setTodos((currentTodos) => {\n        return [\n          ...currentTodos,\n          {\n            id: todos.reduce((maxId, todo) => Math.max(maxId, todo.id), 0) + 1,\n            title: title.trim(),\n            userId: userSelect,\n            completed: false,\n            user: getUserById(+userSelect),\n          },\n        ];\n      });\n\n      setTitle('');\n      setUserSelect(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"post-title\">\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              id=\"post-title\"\n              value={title}\n              onChange={handleTitleChange}\n            />\n            {!isTitleValid && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n            <select\n              data-cy=\"userSelect\"\n              value={userSelect}\n              onChange={handleUserSelectChange}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {!isUserSelectValid && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}